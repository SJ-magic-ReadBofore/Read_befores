/************************************************************
************************************************************/
■base classのconstructorで仮想関数を呼んではいけない
	base classが生成される段階では、派生classの実態がない.
	故に派生class内で定義された仮想関数がまだ実体化されていないのだ.
	
	純粋仮想関数の場合は、runtime error.
	通常の仮想関数の場合は、base classのそれがcallされてしまう.
	
	このため、本当は、base classのconstructorに書きたかった初期化内容を派生class側のconstructorに書かなければならないことがある.
	base classには、これがきちんと実行されているかのmethodを用意するのがいい.
	
	sample
		void THREAD_BASE::check_if_setup_ok_in_DerivedClass()
		{
			if(fp_Rec == NULL) { ERROR_MSG(); std::exit(1); }
		}
		
■コピーコンストラクタ、代入演算子、デストラクタ
	http://tercel-tech.hatenablog.com/entry/2012/11/03/003302
	
	contents
		・	値オブジェクトを作成するときは「ビッグスリー」原則に従うことが重要である.
			->デストラクタ、コピーコンストラクタ、代入演算子の3つのメンバ関数は常に共存する必要がある
			
		・	さらに、間違いが起こらないように、中でnewをするクラスはコピーを禁止することを義務づけよう。いっそ、作るクラス全てを全部コピー禁止にしてもいい。
		

	■コピー禁止を徹底させるNoncopyableクラス
		http://marupeke296.com/DXCLS_Noncopyable.html
	
	■singleton
		my Github
			https://github.com/SJ-magic-study/study__Singleton
		
		Singleton
			http://marupeke296.com/DP_Singleton.html
		
		wikipedia
			https://ja.wikipedia.org/wiki/Singleton_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3#C.2B.2B.E3.81.A7.E3.81.AE.E5.AE.9F.E8.A3.85.E4.BE.8B
	

■zeroでの割り算に注意

■vectorの取り扱いに注意
	■Consideration_on_Using_vector
		https://github.com/SJ-magic-study/Consideration_on_Using_vector
		
		description
			vectorで、
			"ポインタではなく"、
			オブジェクト自体を取り扱う場合、push_backしたときに次のことが行われています。
				*	push_backの対象となるオブジェクトをコピーコンストラクタでコピー
				*	既にpush_back済みのものがあれば、再びコピーコンストラクタでそのコピーを作り、元々コピーしてあったものをデストラクタで始末する。
			
		Consideration
			vectorでオブジェクト自体を持つのは避けるのが良いかもしれない。
			vectorが廃棄される時に、自動でobjectのdestructorが呼ばれる、と言うメリットはあるものの、
			vectorの「気遣い」であるコピーコンストラクタ、デストラクタに、反って戸惑わされる恐れがあるからです。
			それよりも「後始末をしっかりする」ことさえ注意していればよい「ポインタを持つ」方が楽なのでは、と考えています。
	
■Heap領域を汚し過ぎないように.

■CPU占有率が気になった時は
	FrameRateを落とすと、単純に占有率が半分になる。
	もしsyphonを使っているappであれば、syphonを送る所のみ、FrameRateを落とす(数回に一回のみsend)としても、かなり効果がある(syphon sendは重い処理なので).

■oFにて、music loadの際、mp3などではdecodeに時間が掛かってしまう(長時間のmusicの場合、特に注意)
	load時間短縮のため、mp3->wav としておくこと : ffmpeg
		https://qiita.com/suzutsuki0220/items/43c87488b4684d3d15f6
		> ffmpeg -i "input.mp3" -vn -ac 2 -ar 44100 -acodec pcm_s16le -f wav "output.wav"


■コンストラクタの初期化リストでは、メンバ変数同士の依存をなくす(for safety)
	description
		以下は、bug.
		
			class Hoge
			{
			
				int square;
				int num = 0;
			
			public:
				Hoge(int n):
					num(n),
					square(num*num)
				{}
			
			};
		
		初期化リストに書いた順でなく、メンバ変数の宣言した順番に初期化される。
		安全のため、メンバ変数同士の依存はなくすのがいいだろう。
		

■
■
■
■
■



